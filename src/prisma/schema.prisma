generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  USER
  CHEF
}

/// ユーザー
model User {
  id           String         @id @default(uuid())
  role         RoleType       @default(USER)
  name         String         @db.Text
  profile      String?        @db.Text
  profileImage String?        @db.Text
  Recipe       Recipe[]
  Favorite     Favorite[]
  followed     UserFollower[] @relation("FollowerToFollowed")
  followers    UserFollower[] @relation("FollowedToFollower")
  UserLink     UserLink[]
  CartList     CartList[]
  Memo         Memo[]
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピ・材料の中間テーブル
model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int        @map("recipe_id")
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int        @map("ingredient_id")
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じレシピに同じ材料を複数回登録することを防ぐ
  @@unique([recipeId, ingredientId])
}

/// レシピ
model Recipe {
  id               Int                @id @default(autoincrement())
  title            String
  //* 説明文は場合によっては非常に長いテキストになる可能性があるので、@db.Textを指定しておく
  description      String             @db.Text
  likes            Favorite[]
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @map("user_id")
  //* レシピの材料は複数あるので、@relationを用いて、RecipeIngredientとの関連を定義する
  servingCount     Int                @map("serving_count")
  RecipeIngredient RecipeIngredient[]
  RecipeImage      RecipeImage[]
  CartList         CartList[]
  Instruction      Instruction[]
  RecipeLink       RecipeLink[]
  createdAt        DateTime?          @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamptz(3)
}

/// レシピの画像
model RecipeImage {
  id          String    @id @default(uuid())
  recipe      Recipe    @relation(fields: [recipeId], references: [id])
  recipeId    Int       @map("recipe_id")
  recipeImage String    @map("recipe_image") @db.Text
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピのリンク
model RecipeLink {
  id        String    @id @default(uuid())
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  recipeId  Int       @map("recipe_id")
  linkUrl   String    @map("link_url") @db.Text
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// 作り方
model Instruction {
  id              Int       @id @default(autoincrement())
  recipe          Recipe    @relation(fields: [recipeId], references: [id])
  recipeId        Int       @map("recipe_id")
  stepOrder       BigInt    @map("step_order")
  stepDescription String    @map("step_description") @db.Text
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じレシピに同じ手順を複数回登録することを防ぐ
  @@unique([recipeId, stepOrder])
}

/// 材料
model Ingredient {
  id               Int                @id @default(autoincrement())
  ingredientName   String             @map("ingredient_name") @db.Text
  isCustom         Boolean            @default(false) @map("is_custom")
  RecipeIngredient RecipeIngredient[]
  CartListItem     CartListItem[]
  createdAt        DateTime?          @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピのお気に入り
model Favorite {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  recipeId  Int       @map("recipe_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じユーザーが同じレシピに対して複数の「いいね」をつけることを防ぐ
  @@unique([userId, recipeId])
}

/// ユーザーのフォロー(ユーザーがシェフをフォローする）
model UserFollower {
  id         Int       @id @default(autoincrement())
  follower   User      @relation("FollowerToFollowed", fields: [followerId], references: [id])
  followerId String    @map("follower_id")
  followed   User      @relation("FollowedToFollower", fields: [followedId], references: [id])
  followedId String    @map("followed_id")
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じユーザーが同じユーザーを複数回フォローすることを防ぐ
  @@unique([followerId, followedId])
}

/// ユーザーのリンク
model UserLink {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [chefId], references: [id])
  chefId    String    @map("chef_id")
  url       String
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// 自分メモ
model Memo {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  title       String    @db.Text
  isCompleted Boolean   @default(false)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(3)
}

/// お買い物リスト
model CartList {
  id           Int            @id @default(autoincrement())
  displayOrder Int            @default(0) @map("display_order")
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @map("user_id")
  recipe       Recipe         @relation(fields: [recipeId], references: [id])
  recipeId     Int            @map("recipe_id")
  CartListItem CartListItem[]
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// お買い物リストの材料
model CartListItem {
  id           Int        @id @default(autoincrement())
  isCompleted  Boolean    @default(false) @map("is_completed")
  cartList     CartList   @relation(fields: [cartListId], references: [id])
  cartListId   Int        @map("cart_list_id")
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int        @map("ingredient_id")
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}
