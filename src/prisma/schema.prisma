generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum RoleType {
  ADMIN
  USER
  CHEF
}

/// ユーザー
model User {
  id           String         @id @default(uuid())
  role         RoleType       @default(USER)
  name         String         @db.Text
  profile      String?        @db.Text
  profileImage String?        @db.Text
  Recipe       Recipe[]
  Favorite     Favorite[]
  followed     UserFollower[] @relation("FollowerToFollowed")
  followers    UserFollower[] @relation("FollowedToFollower")
  UserLink     UserLink[]
  CartList     CartList[]
  Memo         Memo[]
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  DraftRecipe  DraftRecipe[]
}

/// レシピ
model Recipe {
  id           String        @id @default(cuid())
  title        String
  description  String        @db.Text
  likes        Favorite[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @map("user_id")
  servingCount Int           @map("serving_count")
  RecipeImage  RecipeImage[]
  CartList     CartList[]
  Instruction  Instruction[]
  RecipeLink   RecipeLink[]
  Ingredient   Ingredient[]
  isPublished  Boolean       @default(false) @map("is_published")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピの下書き
model DraftRecipe {
  id               String             @id @default(cuid())
  title            String?
  description      String?            @db.Text
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String             @map("user_id")
  servingCount     Int?               @map("serving_count")
  DraftRecipeImage DraftRecipeImage[]
  DraftInstruction DraftInstruction[]
  DraftIngredient  DraftIngredient[]
  DraftRecipeLink  DraftRecipeLink[]
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// ドラフトレシピの画像
model DraftRecipeImage {
  id            String       @id @default(uuid())
  recipe        DraftRecipe? @relation(fields: [draftRecipeId], references: [id], onDelete: Cascade)
  draftRecipeId String       @map("draft_recipe_id")
  recipeImage   String       @map("recipe_image") @db.Text
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// ドラフトレシピの作り方
model DraftInstruction {
  id              Int          @id @default(autoincrement())
  recipe          DraftRecipe? @relation(fields: [draftRecipeId], references: [id], onDelete: Cascade)
  draftRecipeId   String       @map("draft_recipe_id")
  stepOrder       Int          @map("step_order")
  stepDescription Json         @map("step_description")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じレシピに同じ手順を複数回登録することを防ぐ
  @@unique([draftRecipeId, stepOrder])
}

/// 材料
model DraftIngredient {
  id            Int          @id @default(autoincrement())
  title         String       @db.Text
  recipe        DraftRecipe? @relation(fields: [draftRecipeId], references: [id], onDelete: Cascade)
  draftRecipeId String       @map("draft_recipe_id")
  isCustom      Boolean      @default(false) @map("is_custom")
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピのリンク
model DraftRecipeLink {
  id            String       @id @default(uuid())
  recipe        DraftRecipe? @relation(fields: [draftRecipeId], references: [id], onDelete: Cascade)
  draftRecipeId String       @map("draft_recipe_id")
  linkUrl       String       @map("link_url") @db.Text
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピの画像
model RecipeImage {
  id          String   @id @default(uuid())
  recipe      Recipe?  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    String   @map("recipe_id")
  recipeImage String   @map("recipe_image") @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピのリンク
model RecipeLink {
  id        String   @id @default(uuid())
  recipe    Recipe?  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String   @map("recipe_id")
  linkUrl   String   @map("link_url") @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// 作り方
model Instruction {
  id              Int      @id @default(autoincrement())
  recipe          Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId        String   @map("recipe_id")
  stepOrder       Int      @map("step_order")
  stepDescription Json     @map("step_description")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じレシピに同じ手順を複数回登録することを防ぐ
  @@unique([recipeId, stepOrder])
}

/// 材料
model Ingredient {
  id           Int            @id @default(autoincrement())
  title        String         @db.Text
  recipe       Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String         @map("recipe_id")
  CartListItem CartListItem[]
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// レシピのお気に入り
model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @map("recipe_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じユーザーが同じレシピに対して複数の「いいね」をつけることを防ぐ
  @@unique([userId, recipeId])
}

/// ユーザーのフォロー(ユーザーがシェフをフォローする）
model UserFollower {
  id         Int      @id @default(autoincrement())
  follower   User     @relation("FollowerToFollowed", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String   @map("follower_id")
  followed   User     @relation("FollowedToFollower", fields: [followedId], references: [id], onDelete: Cascade)
  followedId String   @map("followed_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  //* 同じユーザーが同じユーザーを複数回フォローすることを防ぐ
  @@unique([followerId, followedId])
}

/// ユーザーのリンク
model UserLink {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  url       String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// 自分メモ
model Memo {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  title       String   @db.Text
  isCompleted Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// お買い物リスト
model CartList {
  id           Int            @id @default(autoincrement())
  displayOrder Int            @default(0) @map("display_order")
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String         @map("user_id")
  recipe       Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String         @map("recipe_id")
  CartListItem CartListItem[]
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}

/// お買い物リストの材料
model CartListItem {
  id           Int         @id @default(autoincrement())
  isCompleted  Boolean     @default(false) @map("is_completed")
  cartList     CartList    @relation(fields: [cartListId], references: [id], onDelete: Cascade)
  cartListId   Int         @map("cart_list_id")
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId Int?        @map("ingredient_id")
  // 独自に追加された材料の名前
  title        String?     @db.Text
  // 独自に追加された材料かどうか
  isCustom     Boolean     @default(false) @map("is_custom")
  order        Int
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
}
